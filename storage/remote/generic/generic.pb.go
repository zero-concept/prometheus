// Code generated by protoc-gen-go.
// source: generic.proto
// DO NOT EDIT!

/*
Package generic is a generated protocol buffer package.

It is generated from these files:
	generic.proto

It has these top-level messages:
	Sample
	LabelPair
	TimeSeries
	GenericWriteRequest
	GenericWriteResponse
*/
package generic

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Sample struct {
	Value       float64 `protobuf:"fixed64,1,opt,name=value" json:"value,omitempty"`
	TimestampMs int64   `protobuf:"varint,2,opt,name=timestamp_ms,json=timestampMs" json:"timestamp_ms,omitempty"`
}

func (m *Sample) Reset()                    { *m = Sample{} }
func (m *Sample) String() string            { return proto.CompactTextString(m) }
func (*Sample) ProtoMessage()               {}
func (*Sample) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type LabelPair struct {
	Name  string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Value string `protobuf:"bytes,2,opt,name=value" json:"value,omitempty"`
}

func (m *LabelPair) Reset()                    { *m = LabelPair{} }
func (m *LabelPair) String() string            { return proto.CompactTextString(m) }
func (*LabelPair) ProtoMessage()               {}
func (*LabelPair) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type TimeSeries struct {
	Labels []*LabelPair `protobuf:"bytes,1,rep,name=labels" json:"labels,omitempty"`
	// Sorted by time, oldest sample first.
	Samples []*Sample `protobuf:"bytes,2,rep,name=samples" json:"samples,omitempty"`
}

func (m *TimeSeries) Reset()                    { *m = TimeSeries{} }
func (m *TimeSeries) String() string            { return proto.CompactTextString(m) }
func (*TimeSeries) ProtoMessage()               {}
func (*TimeSeries) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *TimeSeries) GetLabels() []*LabelPair {
	if m != nil {
		return m.Labels
	}
	return nil
}

func (m *TimeSeries) GetSamples() []*Sample {
	if m != nil {
		return m.Samples
	}
	return nil
}

type GenericWriteRequest struct {
	Timeseries []*TimeSeries `protobuf:"bytes,1,rep,name=timeseries" json:"timeseries,omitempty"`
}

func (m *GenericWriteRequest) Reset()                    { *m = GenericWriteRequest{} }
func (m *GenericWriteRequest) String() string            { return proto.CompactTextString(m) }
func (*GenericWriteRequest) ProtoMessage()               {}
func (*GenericWriteRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *GenericWriteRequest) GetTimeseries() []*TimeSeries {
	if m != nil {
		return m.Timeseries
	}
	return nil
}

type GenericWriteResponse struct {
}

func (m *GenericWriteResponse) Reset()                    { *m = GenericWriteResponse{} }
func (m *GenericWriteResponse) String() string            { return proto.CompactTextString(m) }
func (*GenericWriteResponse) ProtoMessage()               {}
func (*GenericWriteResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func init() {
	proto.RegisterType((*Sample)(nil), "generic.Sample")
	proto.RegisterType((*LabelPair)(nil), "generic.LabelPair")
	proto.RegisterType((*TimeSeries)(nil), "generic.TimeSeries")
	proto.RegisterType((*GenericWriteRequest)(nil), "generic.GenericWriteRequest")
	proto.RegisterType((*GenericWriteResponse)(nil), "generic.GenericWriteResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion3

// Client API for GenericWrite service

type GenericWriteClient interface {
	Write(ctx context.Context, in *GenericWriteRequest, opts ...grpc.CallOption) (*GenericWriteResponse, error)
}

type genericWriteClient struct {
	cc *grpc.ClientConn
}

func NewGenericWriteClient(cc *grpc.ClientConn) GenericWriteClient {
	return &genericWriteClient{cc}
}

func (c *genericWriteClient) Write(ctx context.Context, in *GenericWriteRequest, opts ...grpc.CallOption) (*GenericWriteResponse, error) {
	out := new(GenericWriteResponse)
	err := grpc.Invoke(ctx, "/generic.GenericWrite/Write", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for GenericWrite service

type GenericWriteServer interface {
	Write(context.Context, *GenericWriteRequest) (*GenericWriteResponse, error)
}

func RegisterGenericWriteServer(s *grpc.Server, srv GenericWriteServer) {
	s.RegisterService(&_GenericWrite_serviceDesc, srv)
}

func _GenericWrite_Write_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenericWriteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GenericWriteServer).Write(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/generic.GenericWrite/Write",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GenericWriteServer).Write(ctx, req.(*GenericWriteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _GenericWrite_serviceDesc = grpc.ServiceDesc{
	ServiceName: "generic.GenericWrite",
	HandlerType: (*GenericWriteServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Write",
			Handler:    _GenericWrite_Write_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: fileDescriptor0,
}

func init() { proto.RegisterFile("generic.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 260 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x74, 0x91, 0x4f, 0x4b, 0x03, 0x31,
	0x10, 0xc5, 0xdd, 0xd6, 0x6e, 0xe9, 0x6b, 0x45, 0x98, 0x16, 0x29, 0xa2, 0xa0, 0x39, 0x55, 0x0f,
	0x3d, 0xb4, 0xf8, 0x01, 0xbc, 0x28, 0x88, 0x82, 0xa4, 0xa2, 0x47, 0x49, 0xcb, 0x20, 0x0b, 0xfb,
	0xcf, 0x4d, 0xea, 0xe7, 0x37, 0x9b, 0x6c, 0xd3, 0x15, 0xec, 0x6d, 0x66, 0xde, 0xcb, 0x6f, 0xde,
	0x10, 0x9c, 0x7c, 0x71, 0xce, 0x55, 0xb2, 0x99, 0x97, 0x55, 0x61, 0x0a, 0xea, 0x37, 0xad, 0xb8,
	0x47, 0xbc, 0x52, 0x59, 0x99, 0x32, 0x4d, 0xd0, 0xfb, 0x51, 0xe9, 0x96, 0xa7, 0xd1, 0x55, 0x34,
	0x8b, 0xa4, 0x6f, 0xe8, 0x1a, 0x23, 0x93, 0x64, 0xac, 0x8d, 0x35, 0x7d, 0x66, 0x7a, 0xda, 0xb1,
	0x62, 0x57, 0x0e, 0xc3, 0xec, 0x45, 0x8b, 0x3b, 0x0c, 0x9e, 0xd5, 0x9a, 0xd3, 0x57, 0x95, 0x54,
	0x44, 0x38, 0xce, 0x55, 0xe6, 0x21, 0x03, 0xe9, 0xea, 0x3d, 0xb9, 0xe3, 0x86, 0xbe, 0x11, 0x1b,
	0xe0, 0xcd, 0x52, 0x56, 0x36, 0x06, 0x6b, 0xba, 0x45, 0x9c, 0xd6, 0x10, 0x6d, 0x5f, 0x76, 0x67,
	0xc3, 0x05, 0xcd, 0x77, 0x81, 0x03, 0x5b, 0x36, 0x0e, 0xba, 0x41, 0x5f, 0xbb, 0xcc, 0x75, 0x9c,
	0xda, 0x7c, 0x1a, 0xcc, 0xfe, 0x16, 0xb9, 0xd3, 0xc5, 0x13, 0xc6, 0x8f, 0x5e, 0xfa, 0xa8, 0x12,
	0xc3, 0x92, 0xbf, 0xb7, 0x36, 0x37, 0x2d, 0x01, 0x77, 0x81, 0xdb, 0xdd, 0x6c, 0x1c, 0x07, 0xc8,
	0x3e, 0x96, 0x6c, 0xd9, 0xc4, 0x19, 0x26, 0x7f, 0x59, 0xba, 0x2c, 0x72, 0xcd, 0x8b, 0x77, 0x8c,
	0xda, 0x73, 0x7a, 0x40, 0xcf, 0x17, 0x17, 0x81, 0xf8, 0x4f, 0x86, 0xf3, 0xcb, 0x03, 0xaa, 0xa7,
	0x8a, 0xa3, 0x75, 0xec, 0xbe, 0x6a, 0xf9, 0x1b, 0x00, 0x00, 0xff, 0xff, 0x13, 0xaa, 0x22, 0x22,
	0xbb, 0x01, 0x00, 0x00,
}
